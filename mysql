sudo apt-get update
sudo apt-get install mysql-server mysql-client
sudo service mysql restart
#start mysql
mysql -u root -p
--------------------------------------------------------
#getting start
SELECT VERSION();
SELECT NOW();
SELECT USER();

#show engines of mysql
SHOW ENGINES;
SHOW ENGINES \G;

#create database
CREATE DATABASE t1;
DROP DATABASE t1;
SHOW DATABASES;
CREATE DATABASE IF NOT EXISTS t1;
SHOW WARNINGS;
#show code
SHOW CREATE DATABASE t1;
#code:latin1(default), gbk, utf8.
CREATE DATABASE IF NOT EXISTS t2 CHARACTER SET gbk;
SHOW CREATE DATABASE t2;
ALTER DATABASE t2 CHARACTER SET = utf8;
#delete database
DROP DATABASE IF EXISTS t2;


#use database 
USE t1;
SELECT DATABASE();
#create table
CREATE TABLE IF NOT EXISTS t11(
username VARCHAR(20),
age TINYINT UNSIGNED,
salary FLOAT(8,2) UNSIGNED
);
#show table
SHOW TABLES;
SHOW TABLES from mysql;
SHOW COLUMNS FROM t11;

#Insert record
INSERT t11 VALUES('Tom', 25, 78953.25);
INSERT t11(username, age) VALUES('Tom', 25);
#show record
SELECT * FROM t11;

#columns can not be NULL
CREATE TABLE t12(
username VARCHAR(20) NOT NULL,
age TINYINT UNSIGNED,
salary FLOAT(8,2) UNSIGNED
);
SHOW COLUMNS FROM t12;
INSERT t12 VALUES('Tom', NULL, 78953.25);
SELECT * FROM t12;
INSERT t12 VALUES(NULL, NULL, 78953.25);
INSERT t12 VALUES('Tom', 'Tom', 78953.25);

#give an id to each record, 1,2,3,4....
CREATE TABLE t13(
id SMALLINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
username VARCHAR(20) NOT NULL,
age TINYINT UNSIGNED,
salary FLOAT(8,2) UNSIGNED
);
SHOW COLUMNS FROM t13;
INSERT t13(username) VALUES('Tom');
INSERT t13(username) VALUES('To2');
INSERT t13(username) VALUES('To3');
INSERT t13(username) VALUES('To4');
SELECT * FROM t13;

CREATE TABLE t14(
id SMALLINT UNSIGNED PRIMARY KEY,
username VARCHAR(20) NOT NULL,
age TINYINT UNSIGNED,
salary FLOAT(8,2) UNSIGNED
);
SHOW COLUMNS FROM t14;
INSERT t14(id, username) VALUES(1,'Tom');
INSERT t14(id, username) VALUES(2,'Tom');
SELECT * FROM t14;
INSERT t14(id, username) VALUES(2,'Tom');


#UNIQUE KEY (can not be same with others, but number of UNIQUE KEY can > 1)
CREATE TABLE t15(
id SMALLINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
username VARCHAR(20) NOT NULL UNIQUE KEY,
age TINYINT UNSIGNED,
salary FLOAT(8,2) UNSIGNED
);
SHOW COLUMNS FROM t15;
INSERT t15(username, age) VALUES('Tom', 22);
SELECT * FROM t15;

#default values
CREATE TABLE t16(
id SMALLINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
username VARCHAR(20) NOT NULL UNIQUE KEY,
sex ENUM('1','2','3') DEFAULT '3'
);
SHOW COLUMNS FROM t16;
INSERT t16(username) VALUES('Tom');
SELECT * FROM t16;

#foreign key
CREATE TABLE province(
id SMALLINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
name VARCHAR(20) NOT NULL
);
#ENGINE=InnoDB
SHOW CREATE TABLE province;
CREATE TABLE uses(
userid SMALLINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
username VARCHAR(20) NOT NULL,
id SMALLINT UNSIGNED,
FOREIGN KEY (id) REFERENCES province (id)
);
#type of FOREIGN KEY should be same with REFERENCES
SHOW COLUMNS FROM uses;
#check index of table
SHOW INDEX FROM province\G;
SHOW INDEX FROM uses\G;
SHOW CREATE TABLE uses\G;

CREATE TABLE uses1(
userid SMALLINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
username VARCHAR(20) NOT NULL,
id SMALLINT UNSIGNED,
FOREIGN KEY (id) REFERENCES province (id) ON DELETE CASCADE
);
SHOW CREATE TABLE uses1;

#insert record, father(province) first, son(uses) later.
INSERT province(name) VALUES('B');
INSERT province(name) VALUES('C');
SELECT * FROM province;
INSERT uses1(username, id) VALUES('b', 2);
SELECT * FROM uses1;
#CASCADE mean that data of son will delete when data of father del 
#SET NULL mean ... set to NULL ...
#RESTRICT/NO ACTION: prohibit the change of father
DELETE FROM province WHERE id = 2;
SELECT * FROM uses1;

#add col
SHOW COLUMNS FROM uses1;
ALTER TABLE uses1 ADD age TINYINT UNSIGNED NOT NULL DEFAULT 10;
ALTER TABLE uses1 ADD password varchar(32) NOT NULL AFTER username;
ALTER TABLE uses1 ADD truename varchar(32) NOT NULL FIRST;
ALTER TABLE uses1 ADD (truename1 varchar(32) NOT NULL, truename2 varchar(32) NOT NULL);
SHOW COLUMNS FROM uses1;

#del col
ALTER TABLE uses1 DROP truename;
ALTER TABLE uses1 DROP truename1, DROP truename2;
ALTER TABLE uses1 DROP truename1, ADD truename varchar(32) NOT NULL FIRST;

#add/del primary key
CREATE TABlE user2(
username VARCHAR(10) NOT NULL,
pid SMALLINT UNSIGNED
);
ALTER TABLE user2 ADD id SMALLINT UNSIGNED;
SHOW COLUMNS FROM user2;
ALTER TABLE user2 ADD CONSTRAINT PK_user2_id PRIMARY KEY (id);
ALTER TABLE user2 ADD UNIQUE (username);
SHOW CREATE TABLE user2;
ALTER TABLE user2 ADD FOREIGN KEY (pid) REFERENCES province (id);
ALTER TABLE user2 ADD age TINYINT UNSIGNED NOT NULL;
ALTER TABLE user2 ALTER age SET DEFAULT 15;
ALTER TABLE user2 ALTER age DROP DEFAULT;
ALTER TABLE user2 DROP PRIMARY KEY;
ALTER TABLE user2 DROP KEY username;
SHOW CREATE TABLE user2;
ALTER TABLE user2 DROP FOREIGN KEY user2_ibfk_1;
ALTER TABLE user2 DROP KEY pid;
SHOW CREATE TABLE user2;

#change position type and clomun name
ALTER TABLE user2 MODIFY id SMALLINT UNSIGNED NOT NULL FIRST;
ALTER TABLE user2 MODIFY id INT UNSIGNED NOT NULL FIRST;
ALTER TABLE user2 MODIFY id SMALLINT UNSIGNED NOT NULL AFTER username;
ALTER TABLE user2 CHANGE pid p_id TINYINT UNSIGNED NOT NULL;
ALTER TABLE user2 RENAME user3;
RENAME user2 TO user3;


#AUTO_INCREMENT donot need to give value, but NULL/DEFAULT
CREATE TABLE user3(
id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
username VARCHAR(20) NOT NULL,
password VARCHAR(32) NOT NULL,
AGE TINYINT UNSIGNED NOT NULL DEFAULT 10,
sex BOOLEAN
);
INSERT user3 VALUES(NULL, 'Tom', '123', 25, 1);
INSERT user3 VALUES(NULL, 'Tom', '123', 3*7-6, 1);
INSERT user3 VALUES(NULL, 'Tom', '123', DEFAULT, 1);
INSERT user3 VALUES(NULL, 'Tom', '123', 25, 1), (NULL, 'rose', MD5('123'), DEFAULT, 0);
INSERT user3 SET username='Ben', password='456';
SELECT * FROM user3;

#change the data in the database
UPDATE user3 SET age=age+5;
UPDATE user3 SET age=age-id, sex=0;
UPDATE user3 SET age=age+10 WHERE id%2=0;
DELETE FROM user3 WHERE id=2;

#find record
SELECT 3+5;
SELECT * FROM user3;
SELECT id, username FROM user3;
SELECT username,id  FROM user3;
SELECT user3.id, user3.username FROM user3;
SELECT id AS userid, username AS uname FROM user3;
SELECT sex FROM user3 GROUP BY sex;
SELECT sex,age FROM user3 GROUP BY sex HAVING age > 15;
SELECT sex FROM user3 GROUP BY sex HAVING count(id) > 0;
SELECT * FROM user3 ORDER BY id ASC;
SELECT * FROM user3 ORDER BY age,id DESC;

#limit the number of the results
SELECT * FROM user3;
SELECT * FROM user3 LIMIT 2;
SELECT * FROM user3 LIMIT 2,2;
SELECT * FROM user3 ORDER BY id DESC LIMIT 2,2;


#insert records from other tables
INSERT test(username) SELECT username FROM user3 WHERE age>30 

#数据显示乱码问题，下面仅改变输出显示的编码，没有改变原始数据的编码
SET NAMES gbt;

#子查询：嵌套在查询内部，必须被括号包含。
#比较运算符的子查询
SELECT AVG(good_price) FROM tdb_goods;
SELECT ROUND(AVG(good_price),2) FROM tdb_goods;
SELECT goods_id, goods_name, goods_price FROM tdb_goods WHERE goods_price >=3500;
SELECT goods_id, goods_name, goods_price FROM tdb_goods WHERE goods_price >= (SELECT ROUND(AVG(good_price),2) FROM tdb_goods) ;
#上面显示子查询的结果可以用在查询中，子查询中可以继续嵌套子查询
SELECT goods_price FROM tdb_goods WHERE goods_cate="超极本";
SELECT goods_price FROM tdb_goods WHERE goods_cate="超极本";
SELECT * FROM tdb_goods WHERE goods_cate="超极本" \G;
SELECT goods_id, goods_name, goods_price FROM tdb_goods WHERE goods_price > 
(SELECT goods_price FROM tdb_goods WHERE goods_cate="超极本")
#上面命令错误，因为子查询返回超过一个结果。修改为下面的：ANY（任何一个） SOME（任何一个） ALL（全部）
SELECT goods_id, goods_name, goods_price FROM tdb_goods WHERE goods_price > 
ALL(SELECT goods_price FROM tdb_goods WHERE goods_cate="超极本")
SELECT goods_id, goods_name, goods_price FROM tdb_goods WHERE goods_price =  #等于号时只能是ANY/SOME,不等于只能是ALL
ANY(SELECT goods_price FROM tdb_goods WHERE goods_cate="超极本")

#IN / ONT IN 引发的子查询
#指在子查询里面或者不在子查询里面，IN等价于=ANY, NOT IN 等价于!=ALL/<>ALL

#EXIST / NOT EXIST 引发的子查询，返回的是ture/false

#得到某一个属性的所有可能值
SELECT goods_cate FROM  tdb_goods GROUP BY goods_cate;
#将结果写入另一个数据表
INSERT tdb_goods_cate(cate_name) SELECT goods_cate FROM  tdb_goods GROUP BY goods_cate;
#更新原表，使得外键起作用。即多表更新。
#表的链接，goods_cate是tdb_goods的属性，cate_id,cate_name是tdb_goods_cate的属性。
UPDATE tdb_goods INNER JOIN tdb_goods_cate ON goods_cate = cate_name SET goods_cate = cate_id;

#表的更新一步到位，即创建数据表的同时，将查询的结果写入到数据表
CREATE TABLE tdb_goods_brand (
brand_id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
brand_name VARCHAR(40) NOT NULL)
SELECT brand_name FROM tdb_goods GROUP BY brand_name;
SELECT * FROM tdb_goods_brand;
UPDATE tdb_goods INNER JOIN tdb_goods_brand ON goods_brand = brand_name SET goods_brand = brand_id;
#如果表之间有相同的属性名，这时会出现含义模糊的错误。这时可以给表起别名：
UPDATE tdb_goods AS g INNER JOIN tdb_goods_brand AS b ON g.goods_brand = b.brand_name SET g.goods_brand = b.brand_id;

#接下来要修改原来表的结构
ALTER TABLE tdb_goods CHANGE goods_cate cate_id SMALLINT UNSIGNED NOT NULL,
CHANGE brand_name brand_id SMALLINT UNSIGNED NOT NULL;
#可以创建事实外键，而不是创建物理外键。这可以通过连接来实现。

#内连接，左外连接，右外连接。连接条件可以用ON/WHERE
#内连接仅显示两个表相交的部分
SELECT goods_id, goods_name, cate_name FROM tdb_goods INNER JOIN tdb_goods_cate ON tdb_goods.cate_id = tdb_goods_cate.cate_id;
#左外连接，表示显示左边表的全部，以及右边表的符合条件的部分，即相交的部分。左表有但右表没有的会显示为NULL。
SELECT goods_id, goods_name, cate_name FROM tdb_goods LEFT JOIN tdb_goods_cate ON tdb_goods.cate_id = tdb_goods_cate.cate_id;
#右外连接，表示显示右边表的全部，以及左边表的符合条件的部分，即相交的部分。右表有但左表没有的会显示为NULL。
SELECT goods_id, goods_name, cate_name FROM tdb_goods RIGHT JOIN tdb_goods_cate ON tdb_goods.cate_id = tdb_goods_cate.cate_id;

#多表连接
SELECT goods_id, goods_name, cate_name, brand_name, goods_price FROM tdb_goods AS g 
INNER JOIN tdb_goods_cate AS c ON g.cate_id = c.cate_id,
INNER JOIN tdb_goods_cate AS b ON g.brand_id = b.brand_id \G;


#################################################################
-----group by-------
#按类别对数量求和，进行汇总
select 类别, sum(数量) as 数量之和
from A
group by 类别

#对返回的结果进行排序
select 类别, sum(数量) AS 数量之和
from A
group by 类别
order by sum(数量) desc

select 类别, sum(数量) as 数量之和, 摘要
from A
group by 类别
order by 类别 desc
#执行后会提示错误。在select指定的字段要么就要包含在Group By语句的后面，作为分组的依据；要么就要被包含在聚合函数中。
#这里“摘要”没有作为分组依据，也没有被包含在聚合函数中

select 类别, 摘要, sum(数量) as 数量之和
from A
group by all 类别, 摘要
#可以指定“摘要”字段，其原因在于“多列分组”中包含了“摘要字段”
#“多列分组”实际上就是就是按照多列（类别+摘要）合并后的值进行分组。
#这里对相同的“类别, 摘要”进行分组汇总，只有“类别, 摘要”都相同的才会合并

#求各组平均值
select 类别, avg(数量) AS 平均值 from A group by 类别;

#求各组记录数目
select 类别, count(*) AS 记录数 from A group by 类别;

-----Having与Where的区别-----
#where 子句的作用是在对查询结果进行分组前，将不符合where条件的行去掉，即在分组之前过滤数据，where条件中不能包含聚组函数，使用where条件过滤出特定的行。
#having 子句的作用是筛选满足条件的组，即在分组之后过滤数据，条件中经常包含聚组函数，使用having 条件过滤出特定的组，也可以使用多个分组标准进行分组。

select 类别, sum(数量) as 数量之和 from A
group by 类别
having sum(数量) > 18
#联合使用
select 类别, SUM(数量)from A
where 数量 > 8
group by 类别
having SUM(数量) >  10

select * from A where 数量 > 8

-----Compute 和 Compute By-----
#返回结果后计算（compute）统计结果
select *
from A
where 数量>8
compute max(数量),min(数量),avg(数量)
#compute子句能够观察“查询结果”的数据细节或统计各列数据（如例中max、min和avg），返回结果由select列表和compute统计结果组成。

select *
from A
where 数量 > 8
order by 类别
compute max(数量),min(数量),avg(数量) by 类别
#示例11与示例10相比多了“order by 类别”和“... by 类别”，示例10的执行结果实际是按照分组（类别）进行了显示，
#每组都是由该组数据列表和该组数统计结果组成，另外：
#compute子句必须与order by子句用一起使用
#compute...by与group by相比，group by 只能得到各组数据的统计结果，而不能看到各组数据



###############################################################
################ book###############
###############################################################
#PRIMARY KEY
CREATE TABLE tb_temp(
id INT(11),
name VARCHAR(25),
deptID INT(11),
salary FLOAT,
PRIMARY KEY(id)
);

CREATE TABLE tb_temp1(
id INT(11),
name VARCHAR(25),
deptID INT(11),
salary FLOAT,
PRIMARY KEY(name, deptID)
);

CREATE TABLE tb_temp2(
id INT(11) PRIMARY KEY,
deptID INT(11),
CONSTRAINT fk_emp_dept1 FOREIGN KEY (deptID) references tb_temp (id)
);

#describe the structure fo table
DESC tb_temp2;



























